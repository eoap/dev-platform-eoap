apiVersion: skaffold/v4beta9
kind: Config
metadata:
  name: tile-based-training
build:
  artifacts:
    - image: stageout
      context: containers/stage-out
      docker:
        dockerfile: Dockerfile
    - image: validateschema
      context: containers/validate-schema
      docker:
        dockerfile: Dockerfile

deploy:
  helm:
    releases:
      # argo workflows
      - name: eoap-argo-workflows
        remoteChart: argo/argo-workflows
        namespace: tile-based-training
        createNamespace: true
        wait: true
        setValues:
          crds.install: true
          server.authModes: [server]
          singleNamespace: true
          workflow:
            serviceAccount:
              create: true
              name: "argo"
            rbac:
              create: true
          controller:
            workflowNamespaces:
              - tile-based-training
            workflowDefaults:
              spec:
                serviceAccountName: argo
                podGC:
                  strategy: OnWorkflowCompletion
                  deleteDelayDuration: 120s
            rbac.writeConfigMaps: true
            securityContext.runAsNonRoot: false
          artifactRepository.s3:
            bucket: workflows
            endpoint: eoap-event-driven-localstack:4566
            insecure: true
            accessKeySecret:
              name: localstack-cred
              key: accesskey
            secretKeySecret:
              name: localstack-cred
              key: secretkey
      
      # Argo CWL Runner
      - name: argo-cwl-runner
        chartPath: ./charts/argo-cwl-runner
        namespace: tile-based-training
        valuesFiles:
          - ./charts/argo-cwl-runner/values.yaml
        setValueTemplates:
          stageOutImage: "{{.IMAGE_NAME_stageout}}:{{.IMAGE_TAG_stageout}}"
        setFiles:
          userSettings: ./charts/argo-cwl-runner/files/user-settings.json

      # LocalStack
      - name: tile-based-training-localstack
        remoteChart: localstack/localstack
        namespace: tile-based-training
        createNamespace: true
        wait: true
        setValues:
          service.type: ClusterIP

      # Code-Server with Calrissian
      - name: tile-based-training-coder
        chartPath: ../charts/coder
        namespace: tile-based-training
        createNamespace: true
        wait: true
        setValues:
          coder.coderImage: eoepca/pde-code-server:1.0.0
          coder.workspace: machine-learning-process
          coderstorageClassName: standard
          coder.workspaceStorage: 10Gi
          coderResources.limits.cpu: '2'
          coderResources.limits.memory: '6442450944'
          coderResources.requests.cpu: '1'
          coderResources.requests.memory: '4294967296'
          calrissian.enabled: true
        setFiles: {
          initScript: ./files/init.sh,
          bashrcScript: ./files/bash-rc,
          bashloginScript: ./files/bash-login
        }
      # MLflow
      - name: my-mlflow
        remoteChart: community-charts/mlflow
        namespace: tile-based-training
        createNamespace: true
        wait: true
        setValues:
          service.type: ClusterIP

portForward:
  - resourceType: service
    resourceName: my-mlflow
    namespace: tile-based-training
    port: 5000
    localPort: 5000

  - resourceType: service
    resourceName: code-server-service
    namespace: tile-based-training
    port: 8080
    localPort: 8000
